var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c="function"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error("Cannot find module '"+i+"'");throw a.code="MODULE_NOT_FOUND",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u="function"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()({1:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var Sample_1 = require("./Sample");
/**
 * 游戏类
 */
var Game = /** @class */ (function () {
    function Game() {
    }
    /**
     * 开始游戏
     */
    Game.start = function () {
        Sample_1.default.start();
    };
    /**
     * 点了退出按钮
     */
    Game.onClickQuit = function () {
        // 退出游戏
        alert("确定退出游戏吗？");
    };
    return Game;
}());
exports.default = Game;
},{"./Sample":4}],2:[function(require,module,exports){
"use strict";
/**This class is automatically generated by LayaAirIDE, please do not make any modifications. */
Object.defineProperty(exports, "__esModule", { value: true });
/*
* 游戏初始化配置;
*/
var GameConfig = /** @class */ (function () {
    function GameConfig() {
    }
    GameConfig.init = function () {
        var reg = Laya.ClassUtils.regClass;
    };
    GameConfig.width = 750;
    GameConfig.height = 1334;
    GameConfig.scaleMode = "fixedwidth";
    GameConfig.screenMode = "none";
    GameConfig.alignV = "top";
    GameConfig.alignH = "left";
    GameConfig.startScene = "TestVew.scene";
    GameConfig.sceneRoot = "";
    GameConfig.debug = false;
    GameConfig.stat = false;
    GameConfig.physicsDebug = false;
    GameConfig.exportSceneToJson = true;
    return GameConfig;
}());
exports.default = GameConfig;
GameConfig.init();
},{}],3:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var GameConfig_1 = require("./GameConfig");
var CoffeeBean_1 = require("./coffee_bean/CoffeeBean");
var CRes_1 = require("./coffee_bean/core/CRes");
var CLOG_1 = require("./coffee_bean/utils/CLOG");
var Game_1 = require("./Game");
var CUI_1 = require("./coffee_bean/ui/CUI");
var Main = /** @class */ (function () {
    function Main() {
        //根据IDE设置初始化引擎		
        if (window["Laya3D"]) {
            Laya3D.init(GameConfig_1.default.width, GameConfig_1.default.height);
        }
        else {
            Laya.init(GameConfig_1.default.width, GameConfig_1.default.height, Laya["WebGL"]);
        }
        Laya["Physics"] && Laya["Physics"].enable();
        Laya["DebugPanel"] && Laya["DebugPanel"].enable();
        Laya.stage.scaleMode = Laya.Stage.SCALE_FIXED_WIDTH;
        Laya.stage.screenMode = GameConfig_1.default.screenMode;
        //兼容微信不支持加载scene后缀场景
        Laya.URL.exportSceneToJson = GameConfig_1.default.exportSceneToJson;
        //打开调试面板（通过IDE设置调试模式，或者url地址增加debug=true参数，均可打开调试面板）
        if (GameConfig_1.default.debug || Laya.Utils.getQueryString("debug") == "true")
            Laya.enableDebugPanel();
        if (GameConfig_1.default.physicsDebug && Laya["PhysicsDebugDraw"])
            Laya["PhysicsDebugDraw"].enable();
        if (GameConfig_1.default.stat)
            Laya.Stat.show();
        Laya.alertGlobalError = true;
        //激活资源版本控制，version.json由IDE发布功能自动生成，如果没有也不影响后续流程
        Laya.ResourceVersion.enable("version.json", Laya.Handler.create(this, this.onVersionLoaded), Laya.ResourceVersion.FILENAME_VERSION);
    }
    /**
     * 版本管理加载完毕
     */
    Main.prototype.onVersionLoaded = function () {
        //激活大小图映射，加载小图的时候，如果发现小图在大图合集里面，则优先加载大图合集，而不是小图
        Laya.AtlasInfoManager.enable("fileconfig.json", Laya.Handler.create(this, this.onConfigLoaded));
    };
    /**
     * 游戏配置加载完毕
     */
    Main.prototype.onConfigLoaded = function () {
        // 初始化游戏框架
        CoffeeBean_1.default.init();
        // 预加载
        this.preload();
    };
    /**
     * 开始预加载
     * TODO
     */
    Main.prototype.preload = function () {
        /*
            --------------- 添加UI缓存清单 ---------------
            不要改
            自动缓存所有UI用到的JSON布局文件
        */
        var resAry = CUI_1.default.getPreloadList();
        /*
            自定义缓存清单
            TODO
        */
        resAry.push({ url: "font/test.ttf", type: Laya.Loader.TTF });
        resAry.push({ url: "data/hahaha.txt", type: Laya.Loader.TEXT });
        resAry.push({ url: "data/xml/testxml.xml", type: Laya.Loader.XML });
        resAry.push({ url: "sound/test.mp3", type: Laya.Loader.SOUND });
        resAry.push({ url: "res/atlas/comp.atlas", type: Laya.Loader.ATLAS });
        resAry.push({ url: "res/atlas/img.atlas", type: Laya.Loader.ATLAS });
        resAry.push({ url: "prefab/TestPrefab.json", type: Laya.Loader.JSON });
        CRes_1.default.preload(resAry, this.onPreloadComplete.bind(this), this.onPreloading.bind(this));
    };
    /**
     * 预加载中回调
     * @param proc 预加载进度
     */
    Main.prototype.onPreloading = function (proc) {
        CLOG_1.default.I("preload loading:{0}", proc);
    };
    /**
     * 预加载完成回调
     */
    Main.prototype.onPreloadComplete = function () {
        CLOG_1.default.I("preload loading complete");
        // 开始游戏
        Game_1.default.start();
    };
    return Main;
}());
//激活启动类
new Main();
},{"./Game":1,"./GameConfig":2,"./coffee_bean/CoffeeBean":5,"./coffee_bean/core/CRes":7,"./coffee_bean/ui/CUI":12,"./coffee_bean/utils/CLOG":15}],4:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var CRes_1 = require("./coffee_bean/core/CRes");
var SC_Main_1 = require("./scene/SC_Main");
var CTime_1 = require("./coffee_bean/utils/CTime");
var SC_Game_1 = require("./scene/SC_Game");
var layaMaxUI_1 = require("./ui/layaMaxUI");
var CScene_1 = require("./coffee_bean/scene/CScene");
var Sample = /** @class */ (function () {
    function Sample() {
    }
    /**
     * 开始示例
     */
    Sample.start = function () {
        // this.sampleCRes();
        // this.sampleScene1();
        // this.sampleScene2();
        // this.sampleEffectAnimation();
        this.sampleUI();
    };
    /**
     * 资源示例
     */
    Sample.sampleCRes = function () {
        return __awaiter(this, void 0, void 0, function () {
            var data, img, sp, sp2;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        data = CRes_1.default.loadJSON("data/json/DT_Sample.json");
                        return [4 /*yield*/, CRes_1.default.loadJSONAsync("data/json/DT_Sample.json")];
                    case 1:
                        // 异步加载JSON，若没有缓存过，则会先加载数据并缓存，数据加载完毕再返回
                        data = _a.sent();
                        img = CRes_1.default.loadImage("img/btn_buy.png");
                        return [4 /*yield*/, CRes_1.default.loadImageAsync("img/btn_buy.png")];
                    case 2:
                        // 异步加载，若没有缓存，则会先加载数据，数据加载完毕再返回
                        // 注意，加载散图时会自动将图集中所有散图一起加载
                        img = _a.sent();
                        sp = new Laya.Sprite();
                        Laya.stage.addChild(sp);
                        sp.pos(100, 100);
                        sp.texture = img;
                        sp2 = Laya.Sprite.fromImage("img/btn_close_off.png");
                        Laya.stage.addChild(sp2);
                        sp2.pos(200, 100);
                        return [2 /*return*/];
                }
            });
        });
    };
    /**
     * 本函数演示场景切换效果
     */
    Sample.sampleScene1 = function () {
        return __awaiter(this, void 0, void 0, function () {
            var main, UI, game, UI2;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        main = SC_Main_1.default.createScene();
                        UI = layaMaxUI_1.ui.TestVewUI.createUI();
                        return [4 /*yield*/, CTime_1.default.waitTime(3000)];
                    case 1:
                        _a.sent();
                        game = CScene_1.default.openScene(SC_Game_1.default);
                        game.bgColor = "ff0000";
                        UI2 = layaMaxUI_1.ui.PopUpUI.createUI();
                        return [2 /*return*/];
                }
            });
        });
    };
    /**
     * 本函数演示场景动画切换效果
     */
    Sample.sampleScene2 = function () {
        return __awaiter(this, void 0, void 0, function () {
            var main, UI, newScene, UI2;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        main = SC_Main_1.default.createScene();
                        UI = layaMaxUI_1.ui.TestVewUI.createUI();
                        return [4 /*yield*/, CTime_1.default.waitTime(3000)];
                    case 1:
                        _a.sent();
                        newScene = main.switchScene(SC_Game_1.default, // 切换目标场景类
                        CScene_1.ESceneEnterFunc.ENTER_FROM_LEFT | CScene_1.ESceneEnterFunc.ENTER_TO_BIG, // 进入动画方式
                        CScene_1.ESceneExitFunc.EXIT_TO_SMALL | CScene_1.ESceneExitFunc.FADE_OUT, // 退出动画方式
                        2000 // 动画时长
                        );
                        // 设置新场景的背景色
                        newScene.bgColor = "#5500aa";
                        // 这种方法与上面的效果一致
                        // let newScene:SC_Game = CScene.switchScene(
                        //     SC_Game,       // 切换目标场景类
                        //     ESceneEnterFunc.ENTER_FROM_LEFT | ESceneEnterFunc.ENTER_TO_BIG,  // 进入动画方式
                        //     ESceneExitFunc.EXIT_TO_SMALL | ESceneExitFunc.FADE_OUT,          // 退出动画方式
                        //     2000           // 动画时长
                        // );
                        return [4 /*yield*/, CTime_1.default.waitTime(3000)];
                    case 2:
                        // 这种方法与上面的效果一致
                        // let newScene:SC_Game = CScene.switchScene(
                        //     SC_Game,       // 切换目标场景类
                        //     ESceneEnterFunc.ENTER_FROM_LEFT | ESceneEnterFunc.ENTER_TO_BIG,  // 进入动画方式
                        //     ESceneExitFunc.EXIT_TO_SMALL | ESceneExitFunc.FADE_OUT,          // 退出动画方式
                        //     2000           // 动画时长
                        // );
                        _a.sent();
                        UI2 = layaMaxUI_1.ui.PopUpUI.createUI();
                        return [2 /*return*/];
                }
            });
        });
    };
    /**
     * 动效示例
     */
    Sample.sampleEffectAnimation = function () {
        var main = SC_Main_1.default.createScene();
        var sp = Laya.Sprite.fromImage("img/btn_help.png");
        sp.pos(Laya.stage.width / 2, 400);
        main.addChild(sp);
        sp.runEffectAnimation(layaMaxUI_1.ui.anim.EffectUI, false);
    };
    /**
     * UI示例
     */
    Sample.sampleUI = function () {
        // 创建主场景
        var main = SC_Main_1.default.createScene();
        // 创建测试UI 到主场景
        var UI = layaMaxUI_1.ui.TestVewUI.createUI();
        UI.OKButton.on(Laya.Event.CLICK, null, function () {
            console.log("点了按钮");
        });
    };
    return Sample;
}());
exports.default = Sample;
},{"./coffee_bean/core/CRes":7,"./coffee_bean/scene/CScene":9,"./coffee_bean/utils/CTime":18,"./scene/SC_Game":20,"./scene/SC_Main":21,"./ui/layaMaxUI":22}],5:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var CExpands_1 = require("./expand/CExpands");
var CLOG_1 = require("./utils/CLOG");
var layaMaxUI_1 = require("../ui/layaMaxUI");
/**
 * 框架类
 * 游戏通过调用 CoffeeBean.init(); 来初始化框架
 */
var CoffeeBean = /** @class */ (function () {
    function CoffeeBean() {
    }
    /**
     * 框架初始化
     */
    CoffeeBean.init = function () {
        // 激活LOG系统
        CLOG_1.default.enable();
        // 激活控制台
        var vConsole = new VConsole();
        CLOG_1.default.I('vConsole inited!!!');
        // 加载扩展代码
        CExpands_1.loadExpands();
        CLOG_1.default.I('Load expand function implementation !!!');
        // 载入UI类
        layaMaxUI_1.UIInit();
    };
    CoffeeBean.hasInit = false;
    return CoffeeBean;
}());
exports.default = CoffeeBean;
},{"../ui/layaMaxUI":22,"./expand/CExpands":8,"./utils/CLOG":15}],6:[function(require,module,exports){
"use strict";
/**
 * CoffeeBean
 * 全局枚举
 * 包括常用的枚举定义
 *
 * By Leo
 * PS：普通枚举在需要用到的地方直接定义导出即可，这里只定义常用的枚举
 */
Object.defineProperty(exports, "__esModule", { value: true });
/*** 2方向 枚举 ***/
var EDirection_2;
(function (EDirection_2) {
    /*** 左 ***/
    EDirection_2[EDirection_2["LEFT"] = 0] = "LEFT";
    /*** 右 ***/
    EDirection_2[EDirection_2["RIGHT"] = 1] = "RIGHT";
})(EDirection_2 = exports.EDirection_2 || (exports.EDirection_2 = {}));
/*** 4方向 枚举 ***/
var EDirection_4;
(function (EDirection_4) {
    /*** 左 ***/
    EDirection_4[EDirection_4["LEFT"] = 0] = "LEFT";
    /*** 上 ***/
    EDirection_4[EDirection_4["UP"] = 1] = "UP";
    /*** 右 ***/
    EDirection_4[EDirection_4["RIGHT"] = 2] = "RIGHT";
    /*** 下 ***/
    EDirection_4[EDirection_4["DOWN"] = 3] = "DOWN";
})(EDirection_4 = exports.EDirection_4 || (exports.EDirection_4 = {}));
/*** 斜4方向 枚举 ***/
var EDirectionSkew_4;
(function (EDirectionSkew_4) {
    /*** 左上方 ***/
    EDirectionSkew_4[EDirectionSkew_4["LEFT_UP"] = 0] = "LEFT_UP";
    /*** 右上方 ***/
    EDirectionSkew_4[EDirectionSkew_4["RIGHT_UP"] = 1] = "RIGHT_UP";
    /*** 右下方 ***/
    EDirectionSkew_4[EDirectionSkew_4["RIGHT_DOWN"] = 2] = "RIGHT_DOWN";
    /*** 左下方 ***/
    EDirectionSkew_4[EDirectionSkew_4["LEFT_DOWN"] = 3] = "LEFT_DOWN";
})(EDirectionSkew_4 = exports.EDirectionSkew_4 || (exports.EDirectionSkew_4 = {}));
/*** 弹出框按钮样式 ***/
var EPopupButtonType;
(function (EPopupButtonType) {
    /*** 只有OK按钮 ***/
    EPopupButtonType[EPopupButtonType["OK_ONLY"] = 0] = "OK_ONLY";
    /*** OK 和 Cancel 按钮都有 ***/
    EPopupButtonType[EPopupButtonType["OK_CANCEL"] = 1] = "OK_CANCEL";
})(EPopupButtonType = exports.EPopupButtonType || (exports.EPopupButtonType = {}));
/*** 比率类型 ***/
var EPrecentType;
(function (EPrecentType) {
    /*** 百分比 ***/
    EPrecentType[EPrecentType["PRECENT_100"] = 100] = "PRECENT_100";
    /*** 千分比 ***/
    EPrecentType[EPrecentType["PRECENT_1000"] = 1000] = "PRECENT_1000";
    /*** 万分比 ***/
    EPrecentType[EPrecentType["PRECENT_10000"] = 10000] = "PRECENT_10000";
})(EPrecentType = exports.EPrecentType || (exports.EPrecentType = {}));
/*** 运行平台 ***/
var ERuntimePlatform;
(function (ERuntimePlatform) {
    /*** PC 端 ***/
    ERuntimePlatform[ERuntimePlatform["PC"] = 0] = "PC";
    /*** Android 端 ***/
    ERuntimePlatform[ERuntimePlatform["ANDROID"] = 1] = "ANDROID";
    /*** IOS 端 ***/
    ERuntimePlatform[ERuntimePlatform["IOS"] = 2] = "IOS";
})(ERuntimePlatform = exports.ERuntimePlatform || (exports.ERuntimePlatform = {}));
},{}],7:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var CLOG_1 = require("../utils/CLOG");
/**
 * 资源管理类
 */
var CRes = /** @class */ (function () {
    function CRes() {
    }
    /**
     * 预加载资源
     */
    CRes.preload = function (resArray, completeCallback, progress) {
        var completeHandler = null;
        var progressHandler = null;
        if (completeCallback)
            completeHandler = Laya.Handler.create(null, completeCallback);
        if (progress)
            progressHandler = Laya.Handler.create(null, progress, null, false);
        Laya.loader.load(resArray, completeHandler, progressHandler);
        Laya.loader.on(Laya.Event.ERROR, this, function (url) { CLOG_1.default.E("preload error {0}", url); });
    };
    /**
     * 读取并返回 JSON 对象
     * 若该对象没有缓存
     * 则自动缓存他
     * 并返回
     */
    CRes.loadJSONAsync = function (url) {
        return __awaiter(this, void 0, void 0, function () {
            var obj;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        obj = Laya.loader.getRes(url);
                        if (!!obj) return [3 /*break*/, 2];
                        return [4 /*yield*/, this.loadResAsync(url, Laya.Loader.JSON)];
                    case 1:
                        obj = _a.sent();
                        _a.label = 2;
                    case 2: return [2 /*return*/, obj];
                }
            });
        });
    };
    /**
     * 读取并返回 贴图 对象
     * 若该对象没有缓存
     * 则自动缓存他
     * 并返回
     */
    CRes.loadImageAsync = function (url) {
        return __awaiter(this, void 0, void 0, function () {
            var obj;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        obj = Laya.loader.getRes(url);
                        if (!!obj) return [3 /*break*/, 2];
                        return [4 /*yield*/, this.loadResAsync(url, Laya.Loader.IMAGE)];
                    case 1:
                        obj = _a.sent();
                        _a.label = 2;
                    case 2: return [2 /*return*/, obj];
                }
            });
        });
    };
    /**
     * 读取并返回 文本 对象
     * 若该对象没有缓存
     * 则自动缓存他
     * 并返回
     */
    CRes.loadTextAsync = function (url) {
        return __awaiter(this, void 0, void 0, function () {
            var obj;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        obj = Laya.loader.getRes(url);
                        if (!!obj) return [3 /*break*/, 2];
                        return [4 /*yield*/, this.loadResAsync(url, Laya.Loader.TEXT)];
                    case 1:
                        obj = _a.sent();
                        _a.label = 2;
                    case 2: return [2 /*return*/, obj];
                }
            });
        });
    };
    /**
     * 读取并返回 声音 对象
     * 若该对象没有缓存
     * 则自动缓存他
     * 并返回
     */
    CRes.loadSoundAsync = function (url) {
        return __awaiter(this, void 0, void 0, function () {
            var obj;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        obj = Laya.loader.getRes(url);
                        if (!!obj) return [3 /*break*/, 2];
                        return [4 /*yield*/, this.loadResAsync(url, Laya.Loader.SOUND)];
                    case 1:
                        obj = _a.sent();
                        _a.label = 2;
                    case 2: return [2 /*return*/, obj];
                }
            });
        });
    };
    /**
    * 读取并返回 JSON 对象
    * 若该对象没有缓存
    * 则返回 null
    */
    CRes.loadJSON = function (url) {
        var obj = Laya.loader.getRes(url);
        if (obj) {
            return obj;
        }
        else {
            return null;
        }
    };
    /**
     * 读取并返回 贴图 对象
     * 若该对象没有缓存
     * 则返回 null
     */
    CRes.loadImage = function (url) {
        var obj = Laya.loader.getRes(url);
        if (obj) {
            return obj;
        }
        else {
            return null;
        }
    };
    /**
     * 读取并返回 文本 对象
     * 若该对象没有缓存
     * 则返回 null
     */
    CRes.loadText = function (url) {
        return __awaiter(this, void 0, void 0, function () {
            var obj;
            return __generator(this, function (_a) {
                obj = Laya.loader.getRes(url);
                if (obj) {
                    return [2 /*return*/, obj];
                }
                else {
                    return [2 /*return*/, null];
                }
                return [2 /*return*/];
            });
        });
    };
    /**
     * 读取并返回 声音 对象
     * 若该对象没有缓存
     * 则返回 null
     */
    CRes.loadSound = function (url) {
        var obj = Laya.loader.getRes(url);
        if (obj) {
            return obj;
        }
        else {
            return null;
        }
    };
    /**
     * 异步加载（缓存）资源
     */
    CRes.loadResAsync = function (resURL, resType) {
        return __awaiter(this, void 0, void 0, function () {
            var func;
            var _this = this;
            return __generator(this, function (_a) {
                func = function (resolve, reject) {
                    Laya.loader.load(resURL, Laya.Handler.create(_this, function () {
                        var obj = Laya.loader.getRes(resURL);
                        resolve(obj);
                    }));
                    Laya.loader.on(Laya.Event.ERROR, _this, function (errURL) { reject(errURL); });
                };
                return [2 /*return*/, new Promise(func)];
            });
        });
    };
    return CRes;
}());
exports.default = CRes;
},{"../utils/CLOG":15}],8:[function(require,module,exports){
"use strict";
/**
 * 扩展实现
 * 在libs/expands.d.ts 中注册方法
 * 在这里实现方法
 */
Object.defineProperty(exports, "__esModule", { value: true });
var CUIBase_1 = require("../ui/CUIBase");
var CUIDialog_1 = require("../ui/CUIDialog");
var CMD5_1 = require("../utils/CMD5");
/**
 * 加载扩展方法
 * 通过export 和空方法调用
 * 来让编译器把本文件编译进代码
 */
function loadExpands() {
    // 注册扩展类
    // UI基类
    Laya.ClassUtils.regClass("UIBase", CUIBase_1.UIBase);
    // UI弹出框基类
    Laya.ClassUtils.regClass("UIDialog", CUIDialog_1.UIDialog);
}
exports.loadExpands = loadExpands;
/**
 * 扩展cc.Node类
 * 新增 getChildByRelativePath 方法
 * 可通过相对路径来获得相对于本节点的子节点
 * @param relative_path 相对路径
 */
laya.display.Node.prototype.getChildByRelativePath = function (relative_path) {
    var childnames = relative_path.split("/");
    var child = this;
    var index = 0;
    while (index < childnames.length) {
        child = child.getChildByName(childnames[index++]);
    }
    if (child == null) {
        console.log("[WARNING]: the node " + relative_path + " can not find in under node " + this.name);
    }
    return child;
};
/**
 * 精灵运行一个动效模板
 * PS：
 *     1.精灵必须已经被加载到舞台了
 *     2.非循环特效才有结束回调，循环特效没有办法设置结束回调
 *     3.循环特效需要手动停止,通过调用循环特效.stopPlaying() 来停止特效播放
 * @param effClass 继承自EffectAnimation的动效类
 * @param isLoop 是否循环
 * @param comleteCallback 结束回调
 */
laya.display.Sprite.prototype.runEffectAnimation = function (effClass, isLoop, completeCallback) {
    // 创建动效                                                                                                        
    var effect = new effClass();
    effect.target = this;
    /**
     * 临时创建节点装载对象
     */
    var sp = new laya.display.Sprite();
    sp.pos(this.x, this.y);
    sp.zOrder = this.zOrder;
    this.parent.addChild(sp);
    this.pos(0, 0);
    sp.addChild(this);
    effect.play(0, isLoop);
    if (!isLoop) {
        effect.on(Laya.Event.COMPLETE, null, function () {
            // 结束时还原容器节点位置
            effect.stopPlaying();
            if (completeCallback)
                completeCallback();
        });
    }
    return effect;
};
/**
 * 在不改变锚点的情况下
 * 设置全屏
 */
laya.display.Sprite.prototype.setFullScreen = function () {
    this.width === 0 && (this.width = Laya.stage.width);
    this.height === 0 && (this.height = Laya.stage.height);
    var ax = this.pivotX / this.width;
    var ay = this.pivotY / this.height;
    this.width = Laya.stage.width;
    this.height = Laya.stage.height;
    this.pos(this.width * ax, this.height * ay);
};
/**
 * 停止播放
 * 此操作会将动效对象还原到原始父节点下
 */
laya.display.EffectAnimation.prototype.stopPlaying = function () {
    var target = this.target;
    var targetContain = target.parent;
    targetContain.parent.addChild(target);
    target.pos(targetContain.x, targetContain.y);
    targetContain.destroy();
};
/**
 * 同时设置组件锚点
 */
laya.ui.UIComponent.prototype.anchor = function (x, y) {
    this.anchorX = x;
    this.anchorY = y;
    return this;
};
/**
 * 字符串的Md5方法
 * let a = "12345";
 * a.MD5();
 *
 * "45adf".MD5();
 */
String.prototype.MD5 = function () {
    return CMD5_1.default.hashStr(this);
};
},{"../ui/CUIBase":13,"../ui/CUIDialog":14,"../utils/CMD5":16}],9:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
/**
 * 新场景进入方式
 */
var ESceneEnterFunc;
(function (ESceneEnterFunc) {
    /**
     * 从上方进入
     */
    ESceneEnterFunc[ESceneEnterFunc["ENTER_FROM_UP"] = 1] = "ENTER_FROM_UP";
    /**
     * 从下方进入
     */
    ESceneEnterFunc[ESceneEnterFunc["ENTER_FROM_DOWN"] = 2] = "ENTER_FROM_DOWN";
    /**
     * 从左方进入
     */
    ESceneEnterFunc[ESceneEnterFunc["ENTER_FROM_LEFT"] = 4] = "ENTER_FROM_LEFT";
    /**
     * 从右方进入
     */
    ESceneEnterFunc[ESceneEnterFunc["ENTER_FROM_RIGHT"] = 8] = "ENTER_FROM_RIGHT";
    /**
     * 放大进入
     */
    ESceneEnterFunc[ESceneEnterFunc["ENTER_TO_BIG"] = 16] = "ENTER_TO_BIG";
    /**
     * 缩小进入
     */
    ESceneEnterFunc[ESceneEnterFunc["ENTER_TO_SMALL"] = 32] = "ENTER_TO_SMALL";
    /**
     * 淡入
     */
    ESceneEnterFunc[ESceneEnterFunc["FADE_IN"] = 64] = "FADE_IN";
})(ESceneEnterFunc = exports.ESceneEnterFunc || (exports.ESceneEnterFunc = {}));
/**
 * 旧场景退出方式
 */
var ESceneExitFunc;
(function (ESceneExitFunc) {
    /**
     * 退出到下方
     */
    ESceneExitFunc[ESceneExitFunc["EXIT_TO_DOWN"] = 1] = "EXIT_TO_DOWN";
    /**
     * 退出到上方
     */
    ESceneExitFunc[ESceneExitFunc["EXIT_TO_UP"] = 2] = "EXIT_TO_UP";
    /**
     * 退出到右边
     */
    ESceneExitFunc[ESceneExitFunc["EXIT_TO_RIGHT"] = 4] = "EXIT_TO_RIGHT";
    /**
     * 退出到左边
     */
    ESceneExitFunc[ESceneExitFunc["EXIT_TO_LEFT"] = 8] = "EXIT_TO_LEFT";
    /**
     * 放大退出
     */
    ESceneExitFunc[ESceneExitFunc["EXIT_TO_BIG"] = 16] = "EXIT_TO_BIG";
    /**
     * 缩小退出
     */
    ESceneExitFunc[ESceneExitFunc["EXIT_TO_SMALL"] = 32] = "EXIT_TO_SMALL";
    /**
     * 淡出
     */
    ESceneExitFunc[ESceneExitFunc["FADE_OUT"] = 64] = "FADE_OUT";
})(ESceneExitFunc = exports.ESceneExitFunc || (exports.ESceneExitFunc = {}));
/**
 * 场景管理器
 * 封装Laya的场景加载操作
 *
 * 要点：
 *     同一时刻只会出现一个场景！！
 *     loadScene
 */
var CScene = /** @class */ (function () {
    function CScene() {
    }
    Object.defineProperty(CScene, "nowScene", {
        /**
         * 当前激活场景
         */
        get: function () {
            return this._nowScene;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * 记录新场景
     */
    CScene.recordNewScene = function (closeOther, newScene) {
        // 防止重复设置
        if (this._nowScene && this._nowScene.sceneRoot == newScene.sceneRoot) {
            return;
        }
        // 设置新场景时，前一个场景必须销毁
        if (closeOther && this._nowScene != null) {
            this._nowScene.sceneRoot.destroy();
            this._nowScene = null;
        }
        this._nowScene = newScene;
    };
    /**
     * 打开一个场景
     * @param targetSceneClass 要打开的场景类
     *
     * 示例
     *     let scene = CScene.openScene( SC_Main );
     */
    CScene.openScene = function (targetSceneClass) {
        return targetSceneClass.createScene();
    };
    /**
     * 切换场景
     * 支持动画
     * @param targetSceneClass 要切换的场景类
     * @param enterFunc 进入方式 支持多种方式混合 例如  ESceneEnterFunc.ENTER_FROM_LEFT | ESceneEnterFunc.ENTER_FROM_UP
     * @param exitFunc 退出方式 支持多种方式混合 例如  ESceneExitFunc.EXIT_TO_RIGHT | ESceneExitFunc.EXIT_TO_DOWN
     * @param time 动画时长
     */
    CScene.switchScene = function (targetSceneClass, enterFunc, exitFunc, time) {
        var nowScene = this._nowScene.sceneRoot;
        return nowScene.switchScene(targetSceneClass, enterFunc, exitFunc, time);
    };
    return CScene;
}());
exports.default = CScene;
},{}],10:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var CScene_1 = require("./CScene");
/**
 * 场景进入退出动画
 */
var CSceneAnim = /** @class */ (function () {
    function CSceneAnim() {
    }
    /**
     *
     * @param oldScene 旧场景
     * @param newScene 新场景
     * @param enterExitFunc 进入退出方法
     * @param time 动画时长
     */
    CSceneAnim.runAnim = function (oldScene, newScene, enterFunc, exitFunc, time) {
        this.runEnterAnimOnTarget(newScene, enterFunc, time);
        this.runExitAnimOnTarget(oldScene, exitFunc, time);
    };
    /**
     * 给目标播放进入动画
     * @param target 目标
     * @param AnimFunc 进入动画
     */
    CSceneAnim.runEnterAnimOnTarget = function (target, AnimFunc, time) {
        var prop = {
            x: Laya.stage.width / 2,
            y: Laya.stage.height / 2,
            scaleX: 1,
            scaleY: 1,
            alpha: 1
        };
        if ((AnimFunc & CScene_1.ESceneEnterFunc.ENTER_FROM_UP) == CScene_1.ESceneEnterFunc.ENTER_FROM_UP) {
            target.y -= Laya.stage.height;
        }
        if ((AnimFunc & CScene_1.ESceneEnterFunc.ENTER_FROM_DOWN) == CScene_1.ESceneEnterFunc.ENTER_FROM_DOWN) {
            target.y += Laya.stage.height;
        }
        if ((AnimFunc & CScene_1.ESceneEnterFunc.ENTER_FROM_LEFT) == CScene_1.ESceneEnterFunc.ENTER_FROM_LEFT) {
            target.x -= Laya.stage.width;
        }
        if ((AnimFunc & CScene_1.ESceneEnterFunc.ENTER_FROM_RIGHT) == CScene_1.ESceneEnterFunc.ENTER_FROM_RIGHT) {
            target.x += Laya.stage.width;
        }
        if ((AnimFunc & CScene_1.ESceneEnterFunc.ENTER_TO_BIG) == CScene_1.ESceneEnterFunc.ENTER_TO_BIG) {
            target.scaleX = 0;
            target.scaleY = 0;
        }
        if ((AnimFunc & CScene_1.ESceneEnterFunc.ENTER_TO_SMALL) == CScene_1.ESceneEnterFunc.ENTER_TO_SMALL) {
            target.scaleX = 2;
            target.scaleY = 2;
        }
        if ((AnimFunc & CScene_1.ESceneEnterFunc.FADE_IN) == CScene_1.ESceneEnterFunc.FADE_IN) {
            target.alpha = 0;
        }
        Laya.Tween.to(target, prop, time);
    };
    /**
     * 给目标播放退出动画
     * @param target 目标
     * @param AnimFunc 进入动画
     */
    CSceneAnim.runExitAnimOnTarget = function (target, AnimFunc, time) {
        var prop = {
            x: target.x,
            y: target.y,
            scaleX: target.scaleX,
            scaleY: target.scaleY,
            alpha: target.alpha
        };
        if ((AnimFunc & CScene_1.ESceneExitFunc.EXIT_TO_DOWN) == CScene_1.ESceneExitFunc.EXIT_TO_DOWN) {
            prop.y += Laya.stage.height;
        }
        if ((AnimFunc & CScene_1.ESceneExitFunc.EXIT_TO_UP) == CScene_1.ESceneExitFunc.EXIT_TO_UP) {
            prop.y -= Laya.stage.height;
        }
        if ((AnimFunc & CScene_1.ESceneExitFunc.EXIT_TO_RIGHT) == CScene_1.ESceneExitFunc.EXIT_TO_RIGHT) {
            prop.x += Laya.stage.width;
        }
        if ((AnimFunc & CScene_1.ESceneExitFunc.EXIT_TO_LEFT) == CScene_1.ESceneExitFunc.EXIT_TO_LEFT) {
            prop.x -= Laya.stage.width;
        }
        if ((AnimFunc & CScene_1.ESceneExitFunc.EXIT_TO_BIG) == CScene_1.ESceneExitFunc.EXIT_TO_BIG) {
            prop.scaleX = 2;
            prop.scaleY = 2;
        }
        if ((AnimFunc & CScene_1.ESceneExitFunc.EXIT_TO_SMALL) == CScene_1.ESceneExitFunc.EXIT_TO_SMALL) {
            prop.scaleX = 0;
            prop.scaleY = 0;
        }
        if ((AnimFunc & CScene_1.ESceneExitFunc.FADE_OUT) == CScene_1.ESceneExitFunc.FADE_OUT) {
            prop.alpha = 0;
        }
        var completeHandler = Laya.Handler.create(null, function () { target.destroy(); });
        Laya.Tween.to(target, prop, time, Laya.Ease.linearNone, completeHandler);
    };
    return CSceneAnim;
}());
exports.default = CSceneAnim;
},{"./CScene":9}],11:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var CLOG_1 = require("../utils/CLOG");
var CScene_1 = require("./CScene");
var CSceneAnim_1 = require("./CSceneAnim");
/**
 * 场景基类
 * 所有场景均继承自本类
 */
var CSceneBase = /** @class */ (function (_super) {
    __extends(CSceneBase, _super);
    function CSceneBase() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        /**
         * 背景色
         */
        _this._bgColor = "#000000";
        return _this;
    }
    Object.defineProperty(CSceneBase.prototype, "bgColor", {
        /**
         * 背景色
         */
        get: function () {
            return this._bgColor;
        },
        /**
             * 背景色
             */
        set: function (value) {
            this._bgColor = value;
            var bg = this.getChildByName("bgColor");
            if (!bg) {
                bg = this.addBGBox();
            }
            bg.bgColor = value;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * 获得场景实例
     */
    CSceneBase.getInstance = function () {
        return this._sinst;
    };
    /**
     * 创建场景
     */
    CSceneBase.create = function () {
        var scene = new this();
        scene.name = this.name;
        scene.pivot(Laya.stage.width / 2, Laya.stage.height / 2);
        scene.size(Laya.stage.width, Laya.stage.height);
        scene.pos(Laya.stage.width / 2, Laya.stage.height / 2);
        return scene;
    };
    /**
     * 创建场景并打开
     *  打开一个新场景，会导致前一个场景被销毁
     */
    CSceneBase.createScene = function () {
        if (this._sinst == null) {
            this._sinst = this.create();
            var uiNode = this._sinst.createUIRoot();
            this._sinst.open(false);
            CScene_1.default.recordNewScene(true, { uiRoot: uiNode, sceneRoot: this._sinst });
        }
        return this._sinst;
    };
    /**
     * 添加背景色盒子
     */
    CSceneBase.prototype.addBGBox = function () {
        var box = new Laya.Box();
        box.setFullScreen();
        box.name = "bgColor";
        box.zOrder = -1;
        this.addChild(box);
        return box;
    };
    /**
     * 创建当前场景 UI 根节点
     */
    CSceneBase.prototype.createUIRoot = function () {
        var UINode = new Laya.Sprite();
        UINode.name = "UIRoot";
        UINode.pivot(0, 0);
        UINode.size(Laya.stage.width, Laya.stage.height);
        UINode.zOrder = 99999999;
        this.addChild(UINode);
        return UINode;
    };
    /**
     * 切换场景
     * 支持动画
     * @param targetSceneClass 要切换的场景类
     * @param enterFunc 进入方式 支持多种方式混合 例如  ESceneEnterFunc.ENTER_FROM_LEFT | ESceneEnterFunc.ENTER_FROM_UP
     * @param exitFunc 退出方式 支持多种方式混合 例如  ESceneExitFunc.EXIT_TO_RIGHT | ESceneExitFunc.EXIT_TO_DOWN
     * @param time 动画时长
     */
    CSceneBase.prototype.switchScene = function (targetSceneClass, enterFunc, exitFunc, time) {
        var newScene = targetSceneClass.create();
        var uiNode = newScene.createUIRoot();
        CScene_1.default.recordNewScene(false, { uiRoot: uiNode, sceneRoot: newScene });
        newScene.open(false);
        CSceneAnim_1.default.runAnim(this, newScene, enterFunc, exitFunc, time);
        return newScene;
    };
    /**
     * 激活每帧更新
     */
    CSceneBase.prototype.activeUpdate = function () {
        this.timer.frameLoop(1, this, this.update);
    };
    /**
     * 禁用每帧更新
     */
    CSceneBase.prototype.disableUpdate = function () {
        this.timer.clear(this, this.update);
    };
    /**
     * 打开场景后
     */
    CSceneBase.prototype.onOpened = function (param) {
        _super.prototype.onOpened.call(this, param);
        CLOG_1.default.I("## Scene ## {0} open", this.name);
    };
    /**
     * 关闭场景后
     */
    CSceneBase.prototype.onClosed = function (type) {
        _super.prototype.onClosed.call(this, type);
        CLOG_1.default.I("## Scene ## {0} will close", this.name);
    };
    /**
     * 每帧执行
     */
    CSceneBase.prototype.update = function () {
        CLOG_1.default.E("请在子类中实现具体逻辑");
    };
    return CSceneBase;
}(Laya.Scene));
exports.default = CSceneBase;
},{"../utils/CLOG":15,"./CScene":9,"./CSceneAnim":10}],12:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
/**
 * UI框架
 * 负责UI的缓存
 */
var CUI = /** @class */ (function () {
    function CUI() {
    }
    /**
     * 添加一个用于缓存的UI到列表
     * @param url 要缓存的UI
     */
    CUI.addUIPreloader = function (url) {
        if (CUI.uilist.indexOf(url) == -1) {
            CUI.uilist.push(url);
        }
    };
    /**
     * 得到要加载的UI清单
     */
    CUI.getPreloadList = function () {
        var resAry = new Array();
        for (var i = 0; i < CUI.uilist.length; i++) {
            resAry.push({ url: CUI.uilist[i], type: Laya.Loader.JSON });
        }
        return resAry;
    };
    /**
     * 用于缓存的UI清单
     */
    CUI.uilist = new Array();
    return CUI;
}());
exports.default = CUI;
},{}],13:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var CScene_1 = require("../scene/CScene");
/**
 * UI基类
 */
var UIBase = /** @class */ (function (_super) {
    __extends(UIBase, _super);
    function UIBase() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
         * UI实例
         * 未创建时为null
         * 一经创建便有值了
         * 除非destroy
         */
    UIBase.UInst = function () {
        return this._uinst;
    };
    /**
         * 获取UI实例
         */
    UIBase.createUI = function () {
        if (this._uinst == null) { // 未被定义时
            this._uinst = new this();
            this._uinst.open(false);
            CScene_1.default.nowScene.uiRoot.addChild(this._uinst);
        }
        return this._uinst;
    };
    return UIBase;
}(Laya.View));
exports.UIBase = UIBase;
},{"../scene/CScene":9}],14:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
/**
 * UI基类
 */
var UIDialog = /** @class */ (function (_super) {
    __extends(UIDialog, _super);
    function UIDialog() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
         * UI实例
         * 未创建时为null
         * 一经创建便有值了
         * 除非destroy
         */
    UIDialog.getUInst = function () {
        return this._uinst;
    };
    /**
         * 获取UI实例
         */
    UIDialog.createUI = function () {
        if (this._uinst == null) { // 未被定义时
            this._uinst = new this();
            this._uinst.open(false);
        }
        return this._uinst;
    };
    return UIDialog;
}(Laya.Dialog));
exports.UIDialog = UIDialog;
},{}],15:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
/**
 * CoffeeBean
 * LOG库封装
 *
 * By Leo
 */
var CTime_1 = require("./CTime");
var CTools_1 = require("./CTools");
/**
 * 游戏名
 */
var GAME_NAME = "travel";
var CLOG = /** @class */ (function () {
    function CLOG() {
    }
    /** 激活log系统 */
    CLOG.enable = function () { this._enable = true; };
    /** 关闭log系统 */
    CLOG.disable = function () { this._enable = false; };
    /**
     * 得到输出字符串
     * 本函数在LOG前面增加了时间和LOG类型
     * @param args 参数数组
     * @param logType log类型 error 还是 warn 还是 info
     */
    CLOG.getMsgStr = function (args, logType) {
        var msg;
        switch (args.length) {
            case 0:
                return " ";
            case 1:
                msg = args[0];
                break;
            default:
                msg = CTools_1.default.formatString.apply(null, args);
                break;
        }
        return "[" + CTime_1.default.getNowTimeStr() + " |" + logType + "] " + msg;
    };
    ;
    /**
       * 输出一个 Info LOG
       * @param params 参数们，可以用来格式化字符串
       */
    CLOG.I = function () {
        var params = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            params[_i] = arguments[_i];
        }
        if (!this._enable)
            return;
        var outStr = this.getMsgStr(params, " INFO");
        console.log(outStr);
    };
    /**
     * 输出一个 Error LOG
     * @param formatStr 格式串 必选参数  若只有一个参数则直接显示
     * @param params 参数们，可以用来格式化字符串
     */
    CLOG.E = function () {
        var params = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            params[_i] = arguments[_i];
        }
        if (!this._enable)
            return;
        var outStr = this.getMsgStr(params, "ERROR");
        console.error(outStr);
    };
    /**
     * 输出一个 Error LOG
     * @param err 错误对象
     */
    CLOG.EE = function (err) {
        if (!this._enable)
            return;
        this.E("----- " + err.name + "-----");
        this.E("message >> " + err.message);
        this.E("stack   >> " + err.stack);
    };
    /**
     * 输出一个 Warning LOG
     * @param formatStr 格式串 必选参数  若只有一个参数则直接显示
     * @param params 参数们，可以用来格式化字符串
     */
    CLOG.W = function () {
        var params = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            params[_i] = arguments[_i];
        }
        if (!this._enable)
            return;
        var outStr = this.getMsgStr(params, " WARN");
        console.warn(outStr);
    };
    /**
     * 条件为真时输出 Info
     * @param condition 条件
     * @param params 参数们，可以用来格式化字符串
     */
    CLOG.IF = function (condition) {
        var params = [];
        for (var _i = 1; _i < arguments.length; _i++) {
            params[_i - 1] = arguments[_i];
        }
        if (!this._enable)
            return;
        if (!condition) {
            return;
        }
        var outStr = this.getMsgStr(params, " INFO");
        console.log(outStr);
    };
    /**
     * 条件为真时输出 Error
     * @param condition 条件
     * @param params 参数们，可以用来格式化字符串
     */
    CLOG.EF = function (condition) {
        var params = [];
        for (var _i = 1; _i < arguments.length; _i++) {
            params[_i - 1] = arguments[_i];
        }
        if (!this._enable)
            return;
        if (!condition) {
            return;
        }
        var outStr = this.getMsgStr(params, "ERROR");
        console.error(outStr);
    };
    /**
     * 条件为真时输出 Warning
     * @param condition 条件
     * @param params 参数们，可以用来格式化字符串
     */
    CLOG.WF = function (condition) {
        var params = [];
        for (var _i = 1; _i < arguments.length; _i++) {
            params[_i - 1] = arguments[_i];
        }
        if (!this._enable)
            return;
        if (!condition) {
            return;
        }
        var outStr = this.getMsgStr(params, " WARN");
        console.warn(outStr);
    };
    /** 是否激活 */
    CLOG._enable = false;
    return CLOG;
}());
exports.default = CLOG;
},{"./CTime":18,"./CTools":19}],16:[function(require,module,exports){
"use strict";
/*
TypeScript Md5
==============

Based on work by
* Joseph Myers: http://www.myersdaily.org/joseph/javascript/md5-text.html
* André Cruz: https://github.com/satazor/SparkMD5
* Raymond Hill: https://github.com/gorhill/yamd5.js

Effectively a TypeScrypt re-write of Raymond Hill JS Library

The MIT License (MIT)

Copyright (C) 2014 Raymond Hill

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in
all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
THE SOFTWARE.



            DO WHAT THE FUCK YOU WANT TO PUBLIC LICENSE
                    Version 2, December 2004

 Copyright (C) 2015 André Cruz <amdfcruz@gmail.com>

 Everyone is permitted to copy and distribute verbatim or modified
 copies of this license document, and changing it is allowed as long
 as the name is changed.

            DO WHAT THE FUCK YOU WANT TO PUBLIC LICENSE
   TERMS AND CONDITIONS FOR COPYING, DISTRIBUTION AND MODIFICATION

  0. You just DO WHAT THE FUCK YOU WANT TO.


*/
Object.defineProperty(exports, "__esModule", { value: true });
var CMD5 = /** @class */ (function () {
    function CMD5() {
        this._state = new Int32Array(4);
        this._buffer = new ArrayBuffer(68);
        this._buffer8 = new Uint8Array(this._buffer, 0, 68);
        this._buffer32 = new Uint32Array(this._buffer, 0, 17);
        this.start();
    }
    // One time hashing functions
    CMD5.hashStr = function (str, raw) {
        if (raw === void 0) { raw = false; }
        return CMD5.onePassHasher
            .start()
            .appendStr(str)
            .end(raw);
    };
    CMD5.hashAsciiStr = function (str, raw) {
        if (raw === void 0) { raw = false; }
        return CMD5.onePassHasher
            .start()
            .appendAsciiStr(str)
            .end(raw);
    };
    CMD5._hex = function (x) {
        var hc = CMD5.hexChars;
        var ho = CMD5.hexOut;
        var n;
        var offset;
        var j;
        var i;
        for (i = 0; i < 4; i += 1) {
            offset = i * 8;
            n = x[i];
            for (j = 0; j < 8; j += 2) {
                ho[offset + 1 + j] = hc.charAt(n & 0x0F);
                n >>>= 4;
                ho[offset + 0 + j] = hc.charAt(n & 0x0F);
                n >>>= 4;
            }
        }
        return ho.join('');
    };
    CMD5._md5cycle = function (x, k) {
        var a = x[0];
        var b = x[1];
        var c = x[2];
        var d = x[3];
        // ff()
        a += (b & c | ~b & d) + k[0] - 680876936 | 0;
        a = (a << 7 | a >>> 25) + b | 0;
        d += (a & b | ~a & c) + k[1] - 389564586 | 0;
        d = (d << 12 | d >>> 20) + a | 0;
        c += (d & a | ~d & b) + k[2] + 606105819 | 0;
        c = (c << 17 | c >>> 15) + d | 0;
        b += (c & d | ~c & a) + k[3] - 1044525330 | 0;
        b = (b << 22 | b >>> 10) + c | 0;
        a += (b & c | ~b & d) + k[4] - 176418897 | 0;
        a = (a << 7 | a >>> 25) + b | 0;
        d += (a & b | ~a & c) + k[5] + 1200080426 | 0;
        d = (d << 12 | d >>> 20) + a | 0;
        c += (d & a | ~d & b) + k[6] - 1473231341 | 0;
        c = (c << 17 | c >>> 15) + d | 0;
        b += (c & d | ~c & a) + k[7] - 45705983 | 0;
        b = (b << 22 | b >>> 10) + c | 0;
        a += (b & c | ~b & d) + k[8] + 1770035416 | 0;
        a = (a << 7 | a >>> 25) + b | 0;
        d += (a & b | ~a & c) + k[9] - 1958414417 | 0;
        d = (d << 12 | d >>> 20) + a | 0;
        c += (d & a | ~d & b) + k[10] - 42063 | 0;
        c = (c << 17 | c >>> 15) + d | 0;
        b += (c & d | ~c & a) + k[11] - 1990404162 | 0;
        b = (b << 22 | b >>> 10) + c | 0;
        a += (b & c | ~b & d) + k[12] + 1804603682 | 0;
        a = (a << 7 | a >>> 25) + b | 0;
        d += (a & b | ~a & c) + k[13] - 40341101 | 0;
        d = (d << 12 | d >>> 20) + a | 0;
        c += (d & a | ~d & b) + k[14] - 1502002290 | 0;
        c = (c << 17 | c >>> 15) + d | 0;
        b += (c & d | ~c & a) + k[15] + 1236535329 | 0;
        b = (b << 22 | b >>> 10) + c | 0;
        // gg()
        a += (b & d | c & ~d) + k[1] - 165796510 | 0;
        a = (a << 5 | a >>> 27) + b | 0;
        d += (a & c | b & ~c) + k[6] - 1069501632 | 0;
        d = (d << 9 | d >>> 23) + a | 0;
        c += (d & b | a & ~b) + k[11] + 643717713 | 0;
        c = (c << 14 | c >>> 18) + d | 0;
        b += (c & a | d & ~a) + k[0] - 373897302 | 0;
        b = (b << 20 | b >>> 12) + c | 0;
        a += (b & d | c & ~d) + k[5] - 701558691 | 0;
        a = (a << 5 | a >>> 27) + b | 0;
        d += (a & c | b & ~c) + k[10] + 38016083 | 0;
        d = (d << 9 | d >>> 23) + a | 0;
        c += (d & b | a & ~b) + k[15] - 660478335 | 0;
        c = (c << 14 | c >>> 18) + d | 0;
        b += (c & a | d & ~a) + k[4] - 405537848 | 0;
        b = (b << 20 | b >>> 12) + c | 0;
        a += (b & d | c & ~d) + k[9] + 568446438 | 0;
        a = (a << 5 | a >>> 27) + b | 0;
        d += (a & c | b & ~c) + k[14] - 1019803690 | 0;
        d = (d << 9 | d >>> 23) + a | 0;
        c += (d & b | a & ~b) + k[3] - 187363961 | 0;
        c = (c << 14 | c >>> 18) + d | 0;
        b += (c & a | d & ~a) + k[8] + 1163531501 | 0;
        b = (b << 20 | b >>> 12) + c | 0;
        a += (b & d | c & ~d) + k[13] - 1444681467 | 0;
        a = (a << 5 | a >>> 27) + b | 0;
        d += (a & c | b & ~c) + k[2] - 51403784 | 0;
        d = (d << 9 | d >>> 23) + a | 0;
        c += (d & b | a & ~b) + k[7] + 1735328473 | 0;
        c = (c << 14 | c >>> 18) + d | 0;
        b += (c & a | d & ~a) + k[12] - 1926607734 | 0;
        b = (b << 20 | b >>> 12) + c | 0;
        // hh()
        a += (b ^ c ^ d) + k[5] - 378558 | 0;
        a = (a << 4 | a >>> 28) + b | 0;
        d += (a ^ b ^ c) + k[8] - 2022574463 | 0;
        d = (d << 11 | d >>> 21) + a | 0;
        c += (d ^ a ^ b) + k[11] + 1839030562 | 0;
        c = (c << 16 | c >>> 16) + d | 0;
        b += (c ^ d ^ a) + k[14] - 35309556 | 0;
        b = (b << 23 | b >>> 9) + c | 0;
        a += (b ^ c ^ d) + k[1] - 1530992060 | 0;
        a = (a << 4 | a >>> 28) + b | 0;
        d += (a ^ b ^ c) + k[4] + 1272893353 | 0;
        d = (d << 11 | d >>> 21) + a | 0;
        c += (d ^ a ^ b) + k[7] - 155497632 | 0;
        c = (c << 16 | c >>> 16) + d | 0;
        b += (c ^ d ^ a) + k[10] - 1094730640 | 0;
        b = (b << 23 | b >>> 9) + c | 0;
        a += (b ^ c ^ d) + k[13] + 681279174 | 0;
        a = (a << 4 | a >>> 28) + b | 0;
        d += (a ^ b ^ c) + k[0] - 358537222 | 0;
        d = (d << 11 | d >>> 21) + a | 0;
        c += (d ^ a ^ b) + k[3] - 722521979 | 0;
        c = (c << 16 | c >>> 16) + d | 0;
        b += (c ^ d ^ a) + k[6] + 76029189 | 0;
        b = (b << 23 | b >>> 9) + c | 0;
        a += (b ^ c ^ d) + k[9] - 640364487 | 0;
        a = (a << 4 | a >>> 28) + b | 0;
        d += (a ^ b ^ c) + k[12] - 421815835 | 0;
        d = (d << 11 | d >>> 21) + a | 0;
        c += (d ^ a ^ b) + k[15] + 530742520 | 0;
        c = (c << 16 | c >>> 16) + d | 0;
        b += (c ^ d ^ a) + k[2] - 995338651 | 0;
        b = (b << 23 | b >>> 9) + c | 0;
        // ii()
        a += (c ^ (b | ~d)) + k[0] - 198630844 | 0;
        a = (a << 6 | a >>> 26) + b | 0;
        d += (b ^ (a | ~c)) + k[7] + 1126891415 | 0;
        d = (d << 10 | d >>> 22) + a | 0;
        c += (a ^ (d | ~b)) + k[14] - 1416354905 | 0;
        c = (c << 15 | c >>> 17) + d | 0;
        b += (d ^ (c | ~a)) + k[5] - 57434055 | 0;
        b = (b << 21 | b >>> 11) + c | 0;
        a += (c ^ (b | ~d)) + k[12] + 1700485571 | 0;
        a = (a << 6 | a >>> 26) + b | 0;
        d += (b ^ (a | ~c)) + k[3] - 1894986606 | 0;
        d = (d << 10 | d >>> 22) + a | 0;
        c += (a ^ (d | ~b)) + k[10] - 1051523 | 0;
        c = (c << 15 | c >>> 17) + d | 0;
        b += (d ^ (c | ~a)) + k[1] - 2054922799 | 0;
        b = (b << 21 | b >>> 11) + c | 0;
        a += (c ^ (b | ~d)) + k[8] + 1873313359 | 0;
        a = (a << 6 | a >>> 26) + b | 0;
        d += (b ^ (a | ~c)) + k[15] - 30611744 | 0;
        d = (d << 10 | d >>> 22) + a | 0;
        c += (a ^ (d | ~b)) + k[6] - 1560198380 | 0;
        c = (c << 15 | c >>> 17) + d | 0;
        b += (d ^ (c | ~a)) + k[13] + 1309151649 | 0;
        b = (b << 21 | b >>> 11) + c | 0;
        a += (c ^ (b | ~d)) + k[4] - 145523070 | 0;
        a = (a << 6 | a >>> 26) + b | 0;
        d += (b ^ (a | ~c)) + k[11] - 1120210379 | 0;
        d = (d << 10 | d >>> 22) + a | 0;
        c += (a ^ (d | ~b)) + k[2] + 718787259 | 0;
        c = (c << 15 | c >>> 17) + d | 0;
        b += (d ^ (c | ~a)) + k[9] - 343485551 | 0;
        b = (b << 21 | b >>> 11) + c | 0;
        x[0] = a + x[0] | 0;
        x[1] = b + x[1] | 0;
        x[2] = c + x[2] | 0;
        x[3] = d + x[3] | 0;
    };
    CMD5.prototype.start = function () {
        this._dataLength = 0;
        this._bufferLength = 0;
        this._state.set(CMD5.stateIdentity);
        return this;
    };
    // Char to code point to to array conversion:
    // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/charCodeAt
    // #Example.3A_Fixing_charCodeAt_to_handle_non-Basic-Multilingual-Plane_characters_if_their_presence_earlier_in_the_string_is_unknown
    CMD5.prototype.appendStr = function (str) {
        var buf8 = this._buffer8;
        var buf32 = this._buffer32;
        var bufLen = this._bufferLength;
        var code;
        var i;
        for (i = 0; i < str.length; i += 1) {
            code = str.charCodeAt(i);
            if (code < 128) {
                buf8[bufLen++] = code;
            }
            else if (code < 0x800) {
                buf8[bufLen++] = (code >>> 6) + 0xC0;
                buf8[bufLen++] = code & 0x3F | 0x80;
            }
            else if (code < 0xD800 || code > 0xDBFF) {
                buf8[bufLen++] = (code >>> 12) + 0xE0;
                buf8[bufLen++] = (code >>> 6 & 0x3F) | 0x80;
                buf8[bufLen++] = (code & 0x3F) | 0x80;
            }
            else {
                code = ((code - 0xD800) * 0x400) + (str.charCodeAt(++i) - 0xDC00) + 0x10000;
                if (code > 0x10FFFF) {
                    throw new Error('Unicode standard supports code points up to U+10FFFF');
                }
                buf8[bufLen++] = (code >>> 18) + 0xF0;
                buf8[bufLen++] = (code >>> 12 & 0x3F) | 0x80;
                buf8[bufLen++] = (code >>> 6 & 0x3F) | 0x80;
                buf8[bufLen++] = (code & 0x3F) | 0x80;
            }
            if (bufLen >= 64) {
                this._dataLength += 64;
                CMD5._md5cycle(this._state, buf32);
                bufLen -= 64;
                buf32[0] = buf32[16];
            }
        }
        this._bufferLength = bufLen;
        return this;
    };
    CMD5.prototype.appendAsciiStr = function (str) {
        var buf8 = this._buffer8;
        var buf32 = this._buffer32;
        var bufLen = this._bufferLength;
        var i;
        var j = 0;
        for (;;) {
            i = Math.min(str.length - j, 64 - bufLen);
            while (i--) {
                buf8[bufLen++] = str.charCodeAt(j++);
            }
            if (bufLen < 64) {
                break;
            }
            this._dataLength += 64;
            CMD5._md5cycle(this._state, buf32);
            bufLen = 0;
        }
        this._bufferLength = bufLen;
        return this;
    };
    CMD5.prototype.appendByteArray = function (input) {
        var buf8 = this._buffer8;
        var buf32 = this._buffer32;
        var bufLen = this._bufferLength;
        var i;
        var j = 0;
        for (;;) {
            i = Math.min(input.length - j, 64 - bufLen);
            while (i--) {
                buf8[bufLen++] = input[j++];
            }
            if (bufLen < 64) {
                break;
            }
            this._dataLength += 64;
            CMD5._md5cycle(this._state, buf32);
            bufLen = 0;
        }
        this._bufferLength = bufLen;
        return this;
    };
    CMD5.prototype.getState = function () {
        var self = this;
        var s = self._state;
        return {
            buffer: String.fromCharCode.apply(null, self._buffer8),
            buflen: self._bufferLength,
            length: self._dataLength,
            state: [s[0], s[1], s[2], s[3]]
        };
    };
    CMD5.prototype.setState = function (state) {
        var buf = state.buffer;
        var x = state.state;
        var s = this._state;
        var i;
        this._dataLength = state.length;
        this._bufferLength = state.buflen;
        s[0] = x[0];
        s[1] = x[1];
        s[2] = x[2];
        s[3] = x[3];
        for (i = 0; i < buf.length; i += 1) {
            this._buffer8[i] = buf.charCodeAt(i);
        }
    };
    CMD5.prototype.end = function (raw) {
        if (raw === void 0) { raw = false; }
        var bufLen = this._bufferLength;
        var buf8 = this._buffer8;
        var buf32 = this._buffer32;
        var i = (bufLen >> 2) + 1;
        var dataBitsLen;
        this._dataLength += bufLen;
        buf8[bufLen] = 0x80;
        buf8[bufLen + 1] = buf8[bufLen + 2] = buf8[bufLen + 3] = 0;
        buf32.set(CMD5.buffer32Identity.subarray(i), i);
        if (bufLen > 55) {
            CMD5._md5cycle(this._state, buf32);
            buf32.set(CMD5.buffer32Identity);
        }
        // Do the final computation based on the tail and length
        // Beware that the final length may not fit in 32 bits so we take care of that
        dataBitsLen = this._dataLength * 8;
        if (dataBitsLen <= 0xFFFFFFFF) {
            buf32[14] = dataBitsLen;
        }
        else {
            var matches = dataBitsLen.toString(16).match(/(.*?)(.{0,8})$/);
            if (matches === null) {
                return;
            }
            var lo = parseInt(matches[2], 16);
            var hi = parseInt(matches[1], 16) || 0;
            buf32[14] = lo;
            buf32[15] = hi;
        }
        CMD5._md5cycle(this._state, buf32);
        return raw ? this._state : CMD5._hex(this._state);
    };
    // Private Static Variables
    CMD5.stateIdentity = new Int32Array([1732584193, -271733879, -1732584194, 271733878]);
    CMD5.buffer32Identity = new Int32Array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]);
    CMD5.hexChars = '0123456789abcdef';
    CMD5.hexOut = [];
    // Permanent instance is to use for one-call hashing
    CMD5.onePassHasher = new CMD5();
    return CMD5;
}());
exports.default = CMD5;
},{}],17:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var CEnum_1 = require("../core/CEnum");
/**
 * CoffeeBean
 * 数学库封装
 *
 * By Leo
 */
var CMath = /** @class */ (function () {
    function CMath() {
    }
    /**
     * 在一个数字 num 前面补上一定数量的  prefix ，长度 = len
     * 返回字符串
     *
     * 如  fixedNumber(123,5,"0") => "00123";
     * @param num  要补前缀的数字
     * @param len  限定长度
     * @param prefix  前缀字符
     */
    CMath.fixedNumber = function (num, len, prefix) {
        return (Array(len).join(prefix) + num).slice(-len);
    };
    /**
     * 限定一个数字在最小到最大值之间，返回限定后的值
     * @param num 要限定的数值
     * @param min 下限
     * @param max 上限
     */
    CMath.clamp = function (num, min, max) {
        if (num < min)
            num = min;
        else if (num > max)
            num = max;
        return num;
    };
    /**
     * 随机数封装，返回值 [min,max) 介于最小（包含），到最大之间（不包含）
     * @param max 最大值   （不包含）
     * @param min 最小值   （包含）
     */
    CMath.randFloat = function (max, min) {
        if (min === void 0) { min = 0; }
        return Math.random() * (max - min) + min;
    };
    /**
     * 随机数封装，返回值 [Min,Max) 介于最小（包含），到最大之间（不包含）
     * @param max 最大值   （不包含）
     * @param min 最小值   （包含）
     */
    CMath.randInt = function (max, min) {
        if (min === void 0) { min = 0; }
        return Math.floor(Math.random() * (max - min) + min);
    };
    /**
     * 随机数封装，返回 0-1之间的小数
     */
    CMath.rand_0_1 = function () {
        return Math.random();
    };
    /**
     * 让一个角度标准化  归入 [0,360) 度之间
     * @param angle 角度
     */
    CMath.normalizeAngle = function (angle) {
        while (angle >= 360) {
            angle -= 360;
        }
        while (angle < 0) {
            angle += 360;
        }
        return angle;
    };
    /**
     * 把一个数字从当前的 min,max区间映射到 newMin , newMax区间
     * 例如
     *     remap(50,0,100,20,40) ===> 30
     * 释义 原数字 50  原区间 0-100
     * 映射到新区间 20-40
     * 返回数字30
     *
     * @param num 要处理的数字
     * @param min 原缩放区间左值
     * @param max 原缩放区间右值
     * @param newMin 新区间左值
     * @param newMax 新区间右值
     */
    CMath.remap = function (num, min, max, newMin, newMax) {
        if (num <= min) {
            return newMin;
        }
        if (num >= max) {
            return newMax;
        }
        return (num - min) / (max - min) * (newMax - newMin) + newMin;
    };
    /**
     * 检查一个概率是否命中
     * @param ratio 概率
     * @param precentType 概率类型 默认为百分比
     */
    CMath.checkBingo = function (ratio, precentType) {
        if (precentType === void 0) { precentType = CEnum_1.EPrecentType.PRECENT_100; }
        return this.randFloat(0, precentType) <= ratio;
    };
    /**
     * 随机打乱一个数组
     * @param array 泛型数组引用
     */
    CMath.shuffle = function (array) {
        for (var i = 0; i < array.length; ++i) {
            var targetPos = this.randInt(array.length);
            var temp = array[i];
            array[i] = array[targetPos];
            array[targetPos] = temp;
        }
    };
    return CMath;
}());
exports.default = CMath;
},{"../core/CEnum":6}],18:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
/**
 * CoffeeBean
 * 时间模块
 * 包括常见的各种对时间的操作
 *
 * By Leo
 */
var CMath_1 = require("./CMath");
var CTime = /** @class */ (function () {
    function CTime() {
    }
    /**
     * 根据格式得到当前时间字符串
     * @param formatstr 格式串  "y+"//年份  "M+"//月份  "d+"//日  "h+"//小时  "m+"//分  "s+"//秒  "q+"//季度  "S" //毫秒
     */
    CTime.getNowTimeStr = function (formatstr) {
        if (formatstr === void 0) { formatstr = "yyyy/MM/dd hh:mm:ss.S"; }
        return CTime.formatTime(new Date(), formatstr);
    };
    /**
     * 格式化时间
     * @param time 时间Date
     * @param formatstr 格式串   "y+"//年份  "M+"//月份  "d+"//日  "h+"//小时  "m+"//分  "s+"//秒  "q+"//季度  "S" //毫秒
     */
    CTime.formatTime = function (time, formatstr) {
        if (formatstr === void 0) { formatstr = "yyyy/MM/dd hh:mm:ss.S"; }
        var o = {
            "M+": time.getMonth() + 1,
            "d+": time.getDate(),
            "h+": time.getHours(),
            "m+": time.getMinutes(),
            "s+": time.getSeconds(),
            "q+": Math.floor((time.getMonth() + 3) / 3),
            "S": CMath_1.default.fixedNumber(time.getMilliseconds(), 3, "0"),
        };
        if (/(y+)/.test(formatstr)) {
            formatstr = formatstr.replace(RegExp.$1, (time.getFullYear() + "").substr(4 - RegExp.$1.length));
        }
        for (var k in o) {
            if (new RegExp("(" + k + ")").test(formatstr)) {
                formatstr = formatstr.replace(RegExp.$1, (RegExp.$1.length == 1) ? (o[k]) : (("00" + o[k]).substr(("" + o[k]).length)));
            }
        }
        return formatstr;
    };
    /**
     * 异步等待
     * await CTime.waitTime(1000);  //等待1秒
     * @param millsec 等待的毫秒数
     */
    CTime.waitTime = function (millsec) {
        return new Promise(function (resolve, reject) {
            setTimeout(function () { return resolve(); }, millsec);
        });
    };
    /**
     * 得到当前时间戳
     * @param millSec 是否返回毫秒
     */
    CTime.getNowTimeStamp = function (millSec) {
        if (millSec === void 0) { millSec = true; }
        var stamp = (new Date()).getTime();
        return millSec ? stamp : Math.floor(stamp / 1000);
    };
    return CTime;
}());
exports.default = CTime;
},{"./CMath":17}],19:[function(require,module,exports){
"use strict";
/**
 * CoffeeBean
 * 工具模块
 * 包括工具函数
 *
 * By Leo
 */
Object.defineProperty(exports, "__esModule", { value: true });
var CTools = /** @class */ (function () {
    function CTools() {
    }
    /**
     * 显示对象的所有组成
     * @param 对象
     */
    CTools.displayObject = function (obj, prefixCount) {
        if (prefixCount === void 0) { prefixCount = 0; }
        var prefix = " ".repeat(prefixCount);
        for (var key in obj) {
            if (obj[key] instanceof Object) {
                this.displayObject(obj[key], prefixCount + 4);
            }
            console.log(prefix + "object key:" + key + "   value:" + obj[key]);
        }
    };
    /**
     * 拷贝源对象身上的 键值 到目标对象身上
     * 简单说
     *     交集拷贝
     *
     * 示例
     * 源对象   A { k1=10,k2=20,k3=30 };
     * 目标对象 B { k2=50,k3=90,k4=130};
     * 执行后   B { k2=20,k3=30,k4=130};
     * @param sourceObj 源对象
     * @param targetObj 目标对象
     */
    CTools.copyObject = function (sourceObj, targetObj) {
        for (var key in sourceObj) {
            if (targetObj[key] != undefined) {
                targetObj[key] = sourceObj[key];
            }
        }
    };
    /**
     * UTF-8数组转字符串
     * @param array utf8数组
     */
    CTools.Utf8ArrayToStr = function (array) {
        var out, i, len, c;
        var char2, char3, char4;
        out = "";
        len = array.length;
        i = 0;
        while (i < len) {
            c = array[i++];
            var pre = (c >> 3);
            if (pre >= 0 && pre <= 15) { // 0xxxxxxx
                out += String.fromCharCode(c);
            }
            else if (pre >= 24 && pre <= 27) { // 110x xxxx   10xx xxxx
                char2 = array[i++];
                out += String.fromCharCode(((c & 0x1F) << 6) | (char2 & 0x3F));
            }
            else if (pre >= 28 && pre <= 29) { // 1110 xxxx  10xx xxxx  10xx xxxx
                char2 = array[i++];
                char3 = array[i++];
                out += String.fromCharCode(((c & 0x0F) << 12) |
                    ((char2 & 0x3F) << 6) |
                    ((char3 & 0x3F) << 0));
            }
            else if (pre == 30) { //1111 0xxx  10xx xxxx  10xx xxxx 10xx xxxx
                char2 = array[i++];
                char3 = array[i++];
                char4 = array[i++];
                out += String.fromCharCode(((c & 0x07) << 15) |
                    ((char2 & 0x3F) << 12) |
                    ((char3 & 0x3F) << 6) |
                    ((char4 & 0x3F) << 0));
            }
        }
        return out;
    };
    /*** 十六进制字符串转十进制数字 ***/
    CTools.hexStrtoDecNumber = function (hexstring) {
        var num = 0;
        for (var i = 0; i < hexstring.length; i++) {
            var element = hexstring.charAt(i);
            num <<= 4;
            switch (element) {
                case 'A':
                case 'a':
                    num += 10;
                    break;
                case 'b':
                case 'B':
                    num += 11;
                    break;
                case 'c':
                case 'C':
                    num += 12;
                    break;
                case 'd':
                case 'D':
                    num += 13;
                    break;
                case 'e':
                case 'E':
                    num += 14;
                    break;
                case 'f':
                case 'F':
                    num += 15;
                    break;
                default:
                    num += parseInt(element);
                    break;
            }
        }
        return num;
    };
    /**
     * 将一个字符串省略一定长度，以特定字符替代
     * 如
     *     CTools.omitStr('asdgadsgdf',3)  =>  'asd...';
     *     CTools.omitStr('asdgadsgdf',4 ,'*')  =>  'asdg***';
     *     CTools.omitStr('asdgadsgdf',5 ,'$' ,2)  =>  'asdga$$';
     *
     * @param targetStr 目标字符串
     * @param omitStart 保留长度
     * @param replacestr 替换字符
     * @param replacelen 替换长度
     */
    CTools.omitStr = function (targetStr, omitStart, replacestr, replacelen) {
        if (replacestr === void 0) { replacestr = '.'; }
        if (replacelen === void 0) { replacelen = 3; }
        if (targetStr.length <= omitStart) {
            return targetStr;
        }
        var tail = replacestr.repeat(replacelen);
        return targetStr.substr(0, omitStart) + tail;
    };
    /**
     * 函数:格式化字符串
     * 参数：str:字符串模板； data:数据
     * 调用方式:formatString("api/values/{id}/{name}",{id:101,name:"test"});
     *         formatString("api/values/{0}/{1}",101,"test");
     */
    CTools.formatString = function (str) {
        var data = [];
        for (var _i = 1; _i < arguments.length; _i++) {
            data[_i - 1] = arguments[_i];
        }
        if (!str || data == undefined) {
            return str;
        }
        if (str.indexOf("{0}") == -1) {
            for (var _a = 0, data_1 = data; _a < data_1.length; _a++) {
                var item = data_1[_a];
                for (var key in item) {
                    if (item.hasOwnProperty(key)) {
                        str = str.replace(new RegExp("\{" + key + "\}", "g"), item[key]);
                    }
                }
            }
        }
        else {
            var args_1 = arguments, reg = new RegExp("\{([0-" + (args_1.length - 1) + "])\}", "g");
            return str.replace(reg, function (match, index) {
                return args_1[index - (-1)];
            });
        }
        return str;
    };
    return CTools;
}());
exports.default = CTools;
},{}],20:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var CSceneBase_1 = require("../coffee_bean/scene/CSceneBase");
var CLOG_1 = require("../coffee_bean/utils/CLOG");
/**
 * 游戏场景
 */
var SC_Game = /** @class */ (function (_super) {
    __extends(SC_Game, _super);
    function SC_Game() {
        return _super.call(this) || this;
    }
    SC_Game.prototype.onOpened = function (param) {
        _super.prototype.onOpened.call(this, param);
        // this.activeUpdate();
    };
    SC_Game.prototype.onClosed = function (type) {
        _super.prototype.onClosed.call(this, type);
        this.disableUpdate();
    };
    SC_Game.prototype.update = function () {
        CLOG_1.default.I("1111");
    };
    return SC_Game;
}(CSceneBase_1.default));
exports.default = SC_Game;
},{"../coffee_bean/scene/CSceneBase":11,"../coffee_bean/utils/CLOG":15}],21:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var CSceneBase_1 = require("../coffee_bean/scene/CSceneBase");
/**
 * 主场景
 */
var SC_Main = /** @class */ (function (_super) {
    __extends(SC_Main, _super);
    function SC_Main() {
        return _super.call(this) || this;
    }
    return SC_Main;
}(CSceneBase_1.default));
exports.default = SC_Main;
},{"../coffee_bean/scene/CSceneBase":11}],22:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
/**This class is automatically generated by LayaAirIDE, please do not make any modifications. */
var CUIbase = require("../coffee_bean/ui/CUIBase");
var CUIDialog = require("../coffee_bean/ui/CUIDialog");
var CUI_1 = require("../coffee_bean/ui/CUI");
var UIDialog = CUIDialog.UIDialog;
var UIBase = CUIbase.UIBase;
var ADD = CUI_1.default.addUIPreloader;
/*
     初始化UI
     确保所有UI类数据都被正确导入
     由框架调用
*/
function UIInit() { }
exports.UIInit = UIInit;
var REG = Laya.ClassUtils.regClass;
var ui;
(function (ui) {
    var anim;
    (function (anim) {
        var EffectUI = /** @class */ (function (_super) {
            __extends(EffectUI, _super);
            function EffectUI() {
                var _this = _super.call(this) || this;
                _this.effectData = ui.anim.EffectUI.uiView;
                return _this;
            }
            EffectUI.uiView = { "type": "View", "props": {}, "compId": 2, "child": [{ "type": "Button", "props": { "y": 0, "x": 0, "stateNum": 1, "skin": "img/btn_quitGame.png" }, "compId": 5 }], "animations": [{ "nodes": [{ "target": 5, "keyframes": { "y": [{ "value": 0, "tweenMethod": "linearNone", "tween": true, "target": 5, "key": "y", "index": 0 }, { "value": 0, "tweenMethod": "expoOut", "tween": true, "target": 5, "key": "y", "index": 5 }, { "value": -70, "tweenMethod": "linearNone", "tween": true, "target": 5, "key": "y", "index": 13 }, { "value": 0, "tweenMethod": "linearNone", "tween": true, "target": 5, "key": "y", "index": 21 }, { "value": -45, "tweenMethod": "linearNone", "tween": true, "target": 5, "key": "y", "index": 27 }, { "value": 0, "tweenMethod": "linearNone", "tween": true, "target": 5, "key": "y", "index": 33 }, { "value": -28, "tweenMethod": "linearNone", "tween": true, "target": 5, "key": "y", "index": 37 }, { "value": 0, "tweenMethod": "linearNone", "tween": true, "target": 5, "key": "y", "index": 41 }, { "value": -12, "tweenMethod": "linearNone", "tween": true, "target": 5, "key": "y", "index": 43 }, { "value": 0, "tweenMethod": "linearNone", "tween": true, "target": 5, "key": "y", "index": 45 }], "skewX": [{ "value": 0, "tweenMethod": "linearNone", "tween": true, "target": 5, "key": "skewX", "index": 0 }, { "value": 0, "tweenMethod": "linearNone", "tween": true, "target": 5, "key": "skewX", "index": 5 }], "scaleY": [{ "value": 1, "tweenMethod": "linearNone", "tween": true, "target": 5, "key": "scaleY", "index": 0 }, { "value": 0.8, "tweenMethod": "linearNone", "tween": true, "target": 5, "key": "scaleY", "index": 5 }, { "value": 1.2, "tweenMethod": "linearNone", "tween": true, "target": 5, "key": "scaleY", "index": 7 }, { "value": 1.15, "tweenMethod": "linearNone", "tween": true, "target": 5, "key": "scaleY", "index": 13 }, { "value": 1.2, "tweenMethod": "linearNone", "tween": true, "target": 5, "key": "scaleY", "index": 19 }, { "value": 0.9, "tweenMethod": "linearNone", "tween": true, "target": 5, "key": "scaleY", "index": 21 }, { "value": 1.1, "tweenMethod": "linearNone", "tween": true, "target": 5, "key": "scaleY", "index": 23 }, { "value": 1.1, "tweenMethod": "linearNone", "tween": true, "target": 5, "key": "scaleY", "index": 31 }, { "value": 0.95, "tweenMethod": "linearNone", "tween": true, "target": 5, "key": "scaleY", "index": 33 }, { "value": 1.05, "tweenMethod": "linearNone", "tween": true, "target": 5, "key": "scaleY", "index": 35 }, { "value": 1.05, "tweenMethod": "linearNone", "tween": true, "target": 5, "key": "scaleY", "index": 39 }, { "value": 0.98, "tweenMethod": "linearNone", "tween": true, "target": 5, "key": "scaleY", "index": 41 }, { "value": 1, "tweenMethod": "linearNone", "tween": true, "target": 5, "key": "scaleY", "index": 43 }], "scaleX": [{ "value": 1, "tweenMethod": "linearNone", "tween": true, "target": 5, "key": "scaleX", "index": 0 }, { "value": 1.2, "tweenMethod": "linearNone", "tween": true, "target": 5, "key": "scaleX", "index": 5 }, { "value": 0.8, "tweenMethod": "linearNone", "tween": true, "target": 5, "key": "scaleX", "index": 7 }, { "value": 0.8, "tweenMethod": "linearNone", "tween": true, "target": 5, "key": "scaleX", "index": 19 }, { "value": 1.1, "tweenMethod": "linearNone", "tween": true, "target": 5, "key": "scaleX", "index": 21 }, { "value": 0.9, "tweenMethod": "linearNone", "tween": true, "target": 5, "key": "scaleX", "index": 23 }, { "value": 0.9, "tweenMethod": "linearNone", "tween": true, "target": 5, "key": "scaleX", "index": 31 }, { "value": 1.05, "tweenMethod": "linearNone", "tween": true, "target": 5, "key": "scaleX", "index": 33 }, { "value": 0.95, "tweenMethod": "linearNone", "tween": true, "target": 5, "key": "scaleX", "index": 35 }, { "value": 0.95, "tweenMethod": "linearNone", "tween": true, "target": 5, "key": "scaleX", "index": 39 }, { "value": 1.02, "tweenMethod": "linearNone", "tween": true, "target": 5, "key": "scaleX", "index": 41 }, { "value": 1, "tweenMethod": "linearNone", "tween": true, "target": 5, "key": "scaleX", "index": 43 }], "anchorY": [{ "value": 0.5, "tweenMethod": "linearNone", "tween": true, "target": 5, "key": "anchorY", "index": 0 }, { "value": 0.5, "tweenMethod": "linearNone", "tween": true, "target": 5, "key": "anchorY", "index": 5 }], "anchorX": [{ "value": 0.5, "tweenMethod": "linearNone", "tween": true, "target": 5, "key": "anchorX", "index": 0 }, { "value": 0.5, "tweenMethod": "linearNone", "tween": true, "target": 5, "key": "anchorX", "index": 5 }] } }], "name": "getEnergyAni", "id": 1, "frameRate": 24, "action": 0 }], "loadList": ["img/btn_quitGame.png"], "loadList3D": [] };
            return EffectUI;
        }(laya.display.EffectAnimation));
        anim.EffectUI = EffectUI;
        REG("ui.anim.EffectUI", EffectUI);
    })(anim = ui.anim || (ui.anim = {}));
})(ui = exports.ui || (exports.ui = {}));
(function (ui) {
    var PopUpUI = /** @class */ (function (_super) {
        __extends(PopUpUI, _super);
        function PopUpUI() {
            return _super.call(this) || this;
        }
        PopUpUI.prototype.createChildren = function () {
            _super.prototype.createChildren.call(this);
            this.loadScene("PopUp");
        };
        return PopUpUI;
    }(UIDialog));
    ui.PopUpUI = PopUpUI;
    REG("ui.PopUpUI", PopUpUI);
    ADD("PopUp.scene");
    var TestVewUI = /** @class */ (function (_super) {
        __extends(TestVewUI, _super);
        function TestVewUI() {
            return _super.call(this) || this;
        }
        TestVewUI.prototype.createChildren = function () {
            _super.prototype.createChildren.call(this);
            this.loadScene("TestVew");
        };
        return TestVewUI;
    }(UIBase));
    ui.TestVewUI = TestVewUI;
    REG("ui.TestVewUI", TestVewUI);
    ADD("TestVew.scene");
})(ui = exports.ui || (exports.ui = {}));
},{"../coffee_bean/ui/CUI":12,"../coffee_bean/ui/CUIBase":13,"../coffee_bean/ui/CUIDialog":14}]},{},[3])
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
